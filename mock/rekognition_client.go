// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/rekognition_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	rekognition "github.com/aws/aws-sdk-go-v2/service/rekognition"
	gomock "github.com/golang/mock/gomock"
)

// MockRekognitionClient is a mock of RekognitionClient interface.
type MockRekognitionClient struct {
	ctrl     *gomock.Controller
	recorder *MockRekognitionClientMockRecorder
}

// MockRekognitionClientMockRecorder is the mock recorder for MockRekognitionClient.
type MockRekognitionClientMockRecorder struct {
	mock *MockRekognitionClient
}

// NewMockRekognitionClient creates a new mock instance.
func NewMockRekognitionClient(ctrl *gomock.Controller) *MockRekognitionClient {
	mock := &MockRekognitionClient{ctrl: ctrl}
	mock.recorder = &MockRekognitionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRekognitionClient) EXPECT() *MockRekognitionClientMockRecorder {
	return m.recorder
}

// DetectFaces mocks base method.
func (m *MockRekognitionClient) DetectFaces(ctx context.Context, params *rekognition.DetectFacesInput, optFns ...func(*rekognition.Options)) (*rekognition.DetectFacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectFaces", varargs...)
	ret0, _ := ret[0].(*rekognition.DetectFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectFaces indicates an expected call of DetectFaces.
func (mr *MockRekognitionClientMockRecorder) DetectFaces(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectFaces", reflect.TypeOf((*MockRekognitionClient)(nil).DetectFaces), varargs...)
}
